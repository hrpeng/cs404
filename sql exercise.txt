----------------- Q2 create numbers table-----------------

if db_id('StatisticsTest_a7b1b') is null 
  create database StatisticsTest_a7b1b;
go
alter database StatisticsTest_a7b1b set recovery simple
go
use StatisticsTest_a7b1b
go
-- Create a Numbers table
create table Numbers(n int not null primary key);
go
insert Numbers(n)
	select rn from (select row_number()
		over(order by current_timestamp) as rn
	    from sys.trace_event_bindings as b1
		,sys.trace_event_bindings as b2) as rd 
	where rn <= 1000000



----------------- Q3 create and insert to T0 table-----------------

use "StatisticsTest_a7b1b"
go

-- Insert 100000 rows. All rows contain the value 1000 for column c1
insert T0(c1)
select 1000 from Numbers
where n <= 100000
go
-- Now insert only one row with value 2000
insert T0(c1) values(2000)
go
--create a nonclustered index on column c1
create nonclustered index ix_T0_1 on T0(c1)


----------------- Q4 queries of T0 ----------------
SELECT c1, c2 FROM T0 where c1=1000
SELECT c1, c2 FROM T0 where c1=2000
SELECT c1, c2 FROM T0 where c1=1500


----------------- Q5 select with variable ------------------
declare @x int
set @x = 2000
select c1,c2 from T0
where c1 = @x


----------------- Q6 create T1 ------------------
use "StatisticsTest_a7b1b";
go
if (object_id('T1', 'U') is not null)
drop table T1
go
create table T1
(
x int not null,
a varchar(20) not null,
b int not null
--y char(20) null
)
go
insert T1(x,a,b)
select n % 1000,n%3000,n%5000
from Numbers
where n <= 100000
go
create nonclustered index IxT1_x on T1(x)


----------------- Q8 sys.stat query ------------------
select object_name(object_id) as table_name
,name as stats_name
,stats_date(object_id, stats_id) as last_update
from sys.stats
where objectproperty(object_id, 'IsUserTable') = 1
order by last_update

DBCC SHOW_STATISTICS('dbo.T1', IxT1_x)


----------------- Q9 execution plans ------------------
select * from T1 where x = 100;
select * from T1 where a = '100';
select * from T1 where a = '234' and b = 1234;

create nonclustered index IxT1_ab on T1(a,b)




----------------- Q10 variable and execution plans ------------------
declare @x int
set @x = 2000
select c1,c2
from T0
where c1 = @x

----solution1: parameter sniffing----
create procedure getT0Values(@x int) as   
 select c1,c2 
 from T0   
 where c1 = @x 

exec getT0Values 2000

--For c1=2000 case, estimated number of rows is 50000.5, while actual number of rows is 1, and access path is table scan. After solution 1 both estimated and actual number of rows are 1, and access path is index seek.
--For c1=1000 case after solution 1, estimated number of rows is 1, while actual number of rows is 100000, and access path is table scan.


----solution2: dynamic SQL----
declare @x int,
@cmd nvarchar(300)
set @x = 1000
set @cmd = 'select c1,c2 from T0 where c1='
+ cast(@x as nvarchar(8))
exec(@cmd)

--both c1=1000 and 2000 has accurate estimations and optimal access paths


----solution3: sp_executesql----
exec sp_executesql N'select c1, c2 from T0 where c1=@x'
,N'@x int'
,@x = 1000

--c1=1000 still has inaccurate estimation of 1 row; access path is index seek
--c1=2000 has good estimation of 1 row; access path is index seek



----------------- Q12 parameterization in T-SQL scripts ------------------

----a. create procedure----
create procedure new_getT0Values(@x int) as
set @x = @x * 2
select c1, c2 from T0
where c1 = @x


----b. execute procedure----

exec new_getT0Values 2000;
exec new_getT0Values 1000;
exec new_getT0Values 500;

                       2000          1000          500
---estimated plan    index seek    table scan   index seek
---actual plan       index seek    index seek   index seek
---estimated rows        1             1            1
---actual rows           0             1          100000

----c. drop procedure----
DROP PROCEDURE new_getT0Values










